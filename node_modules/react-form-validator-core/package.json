{
  "_args": [
    [
      {
        "raw": "react-form-validator-core@0.4.1",
        "scope": null,
        "escapedName": "react-form-validator-core",
        "name": "react-form-validator-core",
        "rawSpec": "0.4.1",
        "spec": "0.4.1",
        "type": "version"
      },
      "D:\\Internship\\Neo Fusion Projek\\Projek 1\\ReactTwitterAPI\\node_modules\\react-material-ui-form-validator"
    ]
  ],
  "_from": "react-form-validator-core@0.4.1",
  "_id": "react-form-validator-core@0.4.1",
  "_inCache": true,
  "_location": "/react-form-validator-core",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-form-validator-core-0.4.1.tgz_1516094641080_0.7721831919625401"
  },
  "_npmUser": {
    "name": "newoldmax",
    "email": "newoldmax@gmail.com"
  },
  "_npmVersion": "5.4.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-form-validator-core@0.4.1",
    "scope": null,
    "escapedName": "react-form-validator-core",
    "name": "react-form-validator-core",
    "rawSpec": "0.4.1",
    "spec": "0.4.1",
    "type": "version"
  },
  "_requiredBy": [
    "/react-material-ui-form-validator"
  ],
  "_resolved": "https://registry.npmjs.org/react-form-validator-core/-/react-form-validator-core-0.4.1.tgz",
  "_shasum": "fba6db1063b4816eb791794de204672e111e12ba",
  "_shrinkwrap": null,
  "_spec": "react-form-validator-core@0.4.1",
  "_where": "D:\\Internship\\Neo Fusion Projek\\Projek 1\\ReactTwitterAPI\\node_modules\\react-material-ui-form-validator",
  "author": {
    "name": "NewOldMax"
  },
  "bugs": {
    "url": "https://github.com/NewOldMax/react-form-validator-core/issues"
  },
  "dependencies": {},
  "description": "Core validator component for react forms.",
  "devDependencies": {
    "babel-cli": "^6.3.17",
    "babel-core": "^6.5.1",
    "babel-eslint": "^7.1.1",
    "babel-loader": "^6.2.2",
    "babel-polyfill": "^6.5.0",
    "babel-preset-es2015": "6.16.0",
    "babel-preset-react": "6.16.0",
    "babel-preset-stage-2": "6.16.0",
    "babelify": "7.3.0",
    "browser-sync": "2.17.5",
    "browserify": "13.1.0",
    "bufferutil": "1.2.1",
    "envify": "3.4.1",
    "eslint": "^3.11.1",
    "eslint-config-airbnb": "^13.0.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "2.2.3",
    "eslint-plugin-react": "^6.8.0",
    "nodemon": "1.11.0",
    "rework": "1.0.1",
    "rework-npm": "1.0.0",
    "rework-npm-cli": "0.1.1",
    "serve": "1.4.0",
    "uglify-js": "2.7.3",
    "utf-8-validate": "1.2.1",
    "watchify": "3.7.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-tc0hFFroMfUFh8+c9/Y6PKRLA+TyIJIqRK6USgjH26yojgeUDBf82Izo/YqFl8199UXr4SjMCcNBJVcKabdtNw==",
    "shasum": "fba6db1063b4816eb791794de204672e111e12ba",
    "tarball": "https://registry.npmjs.org/react-form-validator-core/-/react-form-validator-core-0.4.1.tgz"
  },
  "gitHead": "ed5c9fdc9ee64654660d6dfae2a7e1ae413f18b2",
  "homepage": "https://github.com/NewOldMax/react-form-validator-core#readme",
  "keywords": [
    "react",
    "form",
    "validation"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "newoldmax",
      "email": "newoldmax@gmail.com"
    }
  ],
  "name": "react-form-validator-core",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0.0 || ^16.0.0",
    "react-dom": "^15.0.0 || ^16.0.0",
    "prop-types": "^15.0.0"
  },
  "readme": "## Validation component for react forms\n\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://opensource.org/licenses/MIT)\n[![npm version](https://badge.fury.io/js/react-form-validator-core.svg)](https://badge.fury.io/js/react-form-validator-core)\n[![Build Status](https://travis-ci.org/NewOldMax/react-form-validator-core.svg?branch=master)](https://travis-ci.org/NewOldMax/react-form-validator-core)\n\nSimple form validation component for react forms inspired by [formsy-react](https://github.com/christianalfoni/formsy-react)\n\nDefault validation rules:\n+ matchRegexp\n+ isEmail\n+ isEmpty\n+ required\n+ trim\n+ isNumber\n+ isFloat\n+ isPositive\n+ minNumber\n+ maxNumber\n+ minStringLength\n+ maxStringLength\n+ isString\n\nSome rules can accept extra parameter, example:\n````javascript\n<YourValidationInput\n   {...someProps}\n   validators={['minNumber:0', 'maxNumber:255', 'matchRegexp:^[0-9]$']}\n/>\n````\n\n### Usage\n\n````javascript\nimport React from 'react';\nimport { ValidatorComponent } from 'react-form-validator-core';\n\nclass TextValidator extends ValidatorComponent {\n\n    render() {\n        const { errorMessages, validators, requiredError, validatorListener, ...rest } = this.props;\n\n        return (\n            <div>\n                <input\n                    {...rest}\n                    ref={(r) => { this.input = r; }}\n                />\n                {this.errorText()}\n            </div>\n        );\n    }\n\n    errorText() {\n        const { isValid } = this.state;\n\n        if (isValid) {\n            return null;\n        }\n\n        return (\n            <div style={{ color: 'red' }}>\n                {this.getErrorMessage()}\n            </div>\n        );\n    }\n}\n\nexport default TextValidator;\n````\n\n````javascript\n...\nimport { ValidatorForm } from 'react-form-validator-core';\n...\nrender() {\n    return (\n        <ValidatorForm\n            ref=\"form\"\n            onSubmit={this.handleSubmit}\n        >\n            <TextValidator\n                onChange={this.handleChange}\n                name=\"email\"\n                value={email}\n                validators={['required', 'isEmail']}\n                errorMessages={['this field is required', 'email is not valid']}\n            />\n            <button type=\"submit\">submit</button>\n        </ValidatorForm>\n    );\n}\n...\n````\n\n#### You can add your own rules\n````javascript\nValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n    if (value !== this.state.user.password) {\n        return false;\n    }\n    return true;\n});\n````\n\n### API\n\n#### ValidatorForm\n\n+ Props\n\n| Prop            | Required | Type     | Default value | Description                                                                                                                  |\n|-----------------|----------|----------|---------------|------------------------------------------------------------------------------------------------------------------------------|\n| onSubmit        | true     | function |               | Callback for form that fires when all validations are passed                                                                 |\n| instantValidate | false    | bool     | true          | If true, form will be validated after each field change. If false, form will be validated only after clicking submit button. |\n| onError         | false    | function |               | Callback for form that fires when some of validations are not passed. It will return array of elements which not valid. |\n| debounceTime    | false    | number   | 0             | Debounce time for validation i.e. your validation will run after `debounceTime` ms when you stop changing your input |\n\n+ Methods\n\n| Name             | Params | Return | Descriptipon                                       |\n|------------------|--------|--------|----------------------------------------------------|\n| resetValidations |        |        | Reset validation messages for all validated inputs |\n\n#### All validated fields (ValidatorComponent)\n\n+ Props\n\n| Prop            | Required | Type     | Default value | Description                                                                            |\n|-----------------|----------|----------|---------------|----------------------------------------------------------------------------------------|\n| validators      | false    | array    |               | Array of validators. See list of default validators above.                             |\n| errorMessages   | false    | array    |               | Array of error messages. Order of messages should be the same as `validators` prop.    |\n| name            | true     | string   |               | Name of input                                                                          |\n| validatorListener | false  | function |               | It triggers after each validation. It will return `true` or `false`                    |\n| withRequiredValidator | false | bool  |               | Allow to use `required` validator in any validation trigger, not only form submit      |\n\n+ Methods\n\n| Name             | Params | Return | Descriptipon                                       |\n|------------------|--------|--------|----------------------------------------------------|\n| getErrorMessage  |        |        | Get error validation message                       |\n| validate         | value: any, includeRequired: bool | | Run validation for current component |\n| isValid          |        | bool   | Return current validation state                    |\n| makeInvalid      |        |        | Set invalid validation state                       |\n\n### Implemetations\n\n + [material-ui](https://www.npmjs.com/package/react-material-ui-form-validator)\n\n### Contributing\n\nThis component covers all my needs, but feel free to contribute.\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/NewOldMax/react-form-validator-core.git"
  },
  "scripts": {
    "build": "babel ./src -d ./lib --presets=es2015,react,stage-2",
    "lint": "eslint src/**",
    "prepublish": "npm run build"
  },
  "version": "0.4.1"
}
